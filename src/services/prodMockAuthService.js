/**
 * Servi√ßo de autentica√ß√£o simulada para produ√ß√£o
 * 
 * Este servi√ßo simula a autentica√ß√£o Firebase para ambientes de produ√ß√£o
 * onde n√£o √© poss√≠vel configurar o Firebase Auth.
 */

import { USER_ROLES } from '../types';

// Usu√°rios simulados
const mockUsers = [
  {
    id: 'mock-user-1',
    email: 'luizebvalente@gmail.com',
    password: '123456',
    name: 'Luiz Valente',
    role: USER_ROLES.ADMIN,
    clinicId: 'clinica-sao-lucas',
    isActive: true,
    lastLogin: new Date()
  },
  {
    id: 'mock-user-2',
    email: 'admin@younv.com.br',
    password: '123456',
    name: 'Super Administrador',
    role: USER_ROLES.SUPER_ADMIN,
    clinicId: null,
    isActive: true,
    lastLogin: new Date()
  },
  {
    id: 'mock-user-3',
    email: 'user@clinica.com.br',
    password: '123456',
    name: 'Usu√°rio Regular',
    role: USER_ROLES.USER,
    clinicId: 'clinica-sao-lucas',
    isActive: true,
    lastLogin: new Date()
  }
];

class ProdMockAuthService {
  constructor() {
    this.currentUser = null;
    this.listeners = [];
    this.isInitialized = false;
    console.log('üîÑ Usando autentica√ß√£o simulada para produ√ß√£o');
  }

  // Inicializar o servi√ßo
  async initialize() {
    if (this.isInitialized) return;
    
    console.log('üöÄ Inicializando autentica√ß√£o simulada para produ√ß√£o');
    
    // Verificar se h√° um usu√°rio salvo no localStorage
    const savedUser = localStorage.getItem('mock_auth_user');
    if (savedUser) {
      try {
        this.currentUser = JSON.parse(savedUser);
        // Notificar listeners
        this._notifyListeners();
      } catch (error) {
        console.error('Erro ao recuperar usu√°rio do localStorage:', error);
        localStorage.removeItem('mock_auth_user');
      }
    }
    
    this.isInitialized = true;
    console.log('‚úÖ Autentica√ß√£o simulada inicializada');
  }

  // Registrar listener para mudan√ßas de estado de autentica√ß√£o
  onAuthStateChange(callback) {
    this.listeners.push(callback);
    
    // Notificar imediatamente com o estado atual
    if (this.currentUser) {
      callback({
        user: {
          uid: this.currentUser.id,
          email: this.currentUser.email,
          displayName: this.currentUser.name
        },
        userData: this.currentUser
      });
    } else {
      callback(null);
    }
    
    // Retornar fun√ß√£o para remover o listener
    return () => {
      this.listeners = this.listeners.filter(listener => listener !== callback);
    };
  }

  // Notificar todos os listeners
  _notifyListeners() {
    const authData = this.currentUser ? {
      user: {
        uid: this.currentUser.id,
        email: this.currentUser.email,
        displayName: this.currentUser.name
      },
      userData: this.currentUser
    } : null;
    
    this.listeners.forEach(listener => listener(authData));
  }

  // Login com email e senha
  async login(email, password) {
    console.log(`üîë Tentando login com ${email}`);
    
    const user = mockUsers.find(u => 
      u.email.toLowerCase() === email.toLowerCase() && 
      u.password === password
    );
    
    if (!user) {
      throw new Error('Credenciais inv√°lidas');
    }
    
    if (!user.isActive) {
      throw new Error('Usu√°rio inativo ou n√£o encontrado');
    }
    
    // Atualizar √∫ltimo login
    user.lastLogin = new Date();
    
    // Salvar usu√°rio atual
    this.currentUser = { ...user };
    
    // Salvar no localStorage para persist√™ncia
    localStorage.setItem('mock_auth_user', JSON.stringify(this.currentUser));
    
    // Notificar listeners
    this._notifyListeners();
    
    console.log(`‚úÖ Login bem-sucedido: ${user.name} (${user.role})`);
    
    return {
      user: {
        uid: user.id,
        email: user.email,
        displayName: user.name
      },
      userData: user
    };
  }

  // Logout
  async logout() {
    console.log('üö™ Fazendo logout');
    
    this.currentUser = null;
    localStorage.removeItem('mock_auth_user');
    
    // Notificar listeners
    this._notifyListeners();
    
    console.log('‚úÖ Logout conclu√≠do');
  }

  // Registrar novo usu√°rio
  async register(userData) {
    console.log('üë§ Registrando novo usu√°rio:', userData.email);
    
    // Verificar se o email j√° est√° em uso
    if (mockUsers.some(u => u.email.toLowerCase() === userData.email.toLowerCase())) {
      throw new Error('Este email j√° est√° em uso');
    }
    
    const newUser = {
      id: `mock-user-${Date.now()}`,
      email: userData.email,
      password: userData.password,
      name: userData.name,
      role: userData.role || USER_ROLES.USER,
      clinicId: userData.clinicId,
      isActive: true,
      lastLogin: new Date()
    };
    
    // Adicionar √† lista de usu√°rios
    mockUsers.push(newUser);
    
    console.log(`‚úÖ Usu√°rio registrado: ${newUser.name}`);
    
    return {
      user: {
        uid: newUser.id,
        email: newUser.email,
        displayName: newUser.name
      },
      userData: newUser
    };
  }

  // Resetar senha
  async resetPassword(email) {
    console.log(`üîÑ Solicita√ß√£o de reset de senha para ${email}`);
    
    const user = mockUsers.find(u => u.email.toLowerCase() === email.toLowerCase());
    
    if (!user) {
      throw new Error('Email n√£o encontrado');
    }
    
    console.log(`‚úÖ Link de reset de senha enviado para ${email} (simulado)`);
    
    return true;
  }

  // Verificar se o usu√°rio est√° autenticado
  isAuthenticated() {
    return !!this.currentUser;
  }

  // Obter usu√°rio atual
  getCurrentUser() {
    if (!this.currentUser) return null;
    
    return {
      user: {
        uid: this.currentUser.id,
        email: this.currentUser.email,
        displayName: this.currentUser.name
      },
      userData: this.currentUser
    };
  }

  // Verificar se o usu√°rio tem permiss√£o
  hasPermission(requiredRole) {
    if (!this.currentUser) return false;
    
    // Se requiredRole for um array, verificar se o usu√°rio tem alguma das roles
    if (Array.isArray(requiredRole)) {
      return requiredRole.includes(this.currentUser.role);
    }
    
    // Super admin tem acesso a tudo
    if (this.currentUser.role === USER_ROLES.SUPER_ADMIN) {
      return true;
    }
    
    // Admin tem acesso a admin e user
    if (this.currentUser.role === USER_ROLES.ADMIN) {
      return requiredRole === USER_ROLES.ADMIN || requiredRole === USER_ROLES.USER;
    }
    
    // User s√≥ tem acesso a user
    return requiredRole === USER_ROLES.USER && this.currentUser.role === USER_ROLES.USER;
  }

  // Verificar se o usu√°rio pode acessar uma cl√≠nica
  canAccessClinic(clinicId) {
    if (!this.currentUser) return false;
    
    // Super admin pode acessar qualquer cl√≠nica
    if (this.currentUser.role === USER_ROLES.SUPER_ADMIN) {
      return true;
    }
    
    // Outros usu√°rios s√≥ podem acessar sua pr√≥pria cl√≠nica
    return this.currentUser.clinicId === clinicId;
  }
}

export default new ProdMockAuthService();

